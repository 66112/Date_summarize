//1.构造函数：（就是初始化函数）
//(1)函数名与类名相同，无返回值
//(2)创建对象时，编译器自动调用对应的构造函数
//(3)构造函数可以重载
//(4)构造函数可以在类中定义，也可以在类外定义
//(5)如果没有显式定义构造函数，编译器会自动生成一个无参的默认构造函数；反之，则使用用户定义的
//   类的成员变量放的时随机值
//*编译器生成的构造函数有以下作用：
//基本类型：int / char / double...数组，(不处理);
//自定义类型：class / struct / (调用自定义类型的构造函数)
//(6)无参的构造函数和全缺省的构造函数都称为缺省构造函数，并且缺省构造函数只能有一个
//常用全缺省
//Date(int year = 2000, int month = 1, int day = 1)  //全缺省的构造函数
//{
//	_year = year;
//	_month = month;
//	_day = day;
//}

//2.析构函数（就是清理函数）
//(1)在对象被销毁时，编译器自动调用，完成类的一些资源清理和汕尾工作
//(2)函数名在类名前加上字符~，无参数，无返回值(一般做释放空间的工作)
//(3)一个类只有一个析构函数，若未显式定义，系统会默认生成析构函数:~Date(){}
//(4)对象生命周期结束时，系统会自动调用析构函数
//注意：析构函数体内不是删除对象，而是做一些删除对象前的清理工作

//3.拷贝构造函数(也是一种构造函数的重载)
//(1)只有单个形参，该形参是对本类对象的引用(一般用const修饰)，用已存在的对象创建新对象时，又编译器自动调用
//Date(const Date& d){}
//注意：如果不加&会造成无限递归问题，因为d又是一个实体的拷贝
//(2)若未显式定义。系统会默认生成拷贝构造函数，这个函数会按照成员的声明顺序依次将其初始化(这就是浅拷贝)
//浅拷贝：按字节进行赋值，因此不能拷贝指针，这样会导致两个对象的成员指针指向同一块空间，造成错误
//        
//4.赋值运算符重载
//格式：返回值类型 operator 需要重载的操作符(参数列表)
//Date& operator=(const Date& d)   //运算符重载,返回引用，可以支持连等
//{
//	if (this != &d)
//	{
//		this->_year = d._year;
//		this->_month = d._month;
//		this->_day = d._day;
//	}
//	return *this;
//}
//注意：一个类如果没有显式的定义赋值运算符重载，编译器也会实现一个，完成值的拷贝工作
